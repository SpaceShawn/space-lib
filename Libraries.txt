TODO:

Log Rotation (commander?)

Pass priority to Log()
Test Cases
- 2+ processes logging at the same time
- Log interrupted
- Special Characters
- Date validity and consistency
- Log entry limits 
- Required data entry
- Type safety, data validation, field size test, bounds test
- performance

http://pic.dhe.ibm.com/infocenter/rtrthelp/v8r0m0/index.jsp?topic=%2Fcom.ibm.rational.testrt.studio.doc%2Fref%2FrcppTEST_CASE.htm
http://cpptest.sourceforge.net/tutorial.html

ar  - create, modify, and extract from archives
    - create, write object-file into archive, insert the files into archive
        $ ar rcs libfoo.a bar.o

install
    - copy files and set attributes
    - install [OPTION]... SOURCE... DIRECTORY
    $ install -m 644 libfoo.a  /usr/lib

ld  - The GNU linker
    - ld [options] objfile
    - combines a number of object and archive files, relocates their data and ties up symbol references

ldconfig 
    - configure dynamic linker run-time bindings
    - creates, updates, and removes the necessary links and cache (for use by the run-time linker, ld.so) to the most recent shared libraries found in the directories specified on the command line in /etc/ld.so.conf and in /usr/lib and /lib
    - ignores symbolic links when scanning for libraries
    $ ldconfig -p
        - display contents of the cache
    $ ldconfig -D
        - search for shared libraries and display them


ldd - print shared library dependencies
    $ ldd /usr/bin/foo

lsof
    - list open files
    $ lsof -P -T -p PID

nm  - list symbols from object files
    - the symbol value, the symbol type, the symbol name
    $ nm --dynamic /usr/lib/libfoo.so X 
        - display the symbols defined by the libary

STATIC LIBRARY
    - ar archive (collection) of object files
    - linked into the executable 
    $ http://codingfreak.blogspot.com/2010/01/creating-and-using-static-libraries-in.html

create object file
gcc -c testfoo.c -o foo1.o  

build a static library
$ ar rs libfoo.a foo1.o foo2.o foo3.o

compile and link using a local static library
$ gcc -I. -o bar bar.c libfoo.a

install a static library
$ install -m 644 libfoo.a /usr/lib

compile and link using an installed static library
$ gcc -static -I. -o bar bar.c -1foo

compiling program (main.c) and linking with static library
$ gcc -static main.c -L. -lfoo -o main  
$ $./main

SHARED LIBRARIES
http://codingfreak.blogspot.com/2009/12/creating-and-using-shared-libraries-in.html
http://www.yolinux.com/TUTORIALS/LibraryArchives-StaticAndDynamic.html

build a shared library
$ gcc -shared -Wl, -soname,libjvc.so.1 -o libjvc.so.1.0.1 jvc.o
$ ln -sf libjvc.so.1.0.1 libjvc.so.1.0
$ ln -sf libjvc.so.1.0 libjvc.so.1
$ ln -sf libjvc.so.1 libjvc.so

compile and link using a local shared library
$ gcc -I. -o jvct jvct.c -ljvc -L. -Wl, -rpath,`pwd`  

install a shared library
cp libjvc.so.1.0.1 /lib
(cd /usr/lib; ln -sf ../../libjvc.so.1.0.1 libjvc.so)
ldconfig

compile and link using an installed shared library
$ gcc -I. -o jvct jvct.c -ljvc
